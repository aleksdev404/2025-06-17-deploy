import asyncio
import logging
from datetime import datetime, timedelta

from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

from backend.app.database import Base, engine, SessionLocal
from backend.app.routes.auth import router as auth_router
from backend.app.routes.users import router as users_router
from backend.app.routes.films import router as films_router
from backend.app.routes.materials import router as materials_router
from backend.app.routes.rules import router as rules_router
from backend.app.routes.orders import router as orders_router
from backend.app.routes.stats import router as stats_router
from backend.app.security import admin_required
from backend.app import crud, telegram, models
from backend.app.services import insales


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bg")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Database ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Base.metadata.create_all(bind=engine)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FastAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = FastAPI(title="–£—á—ë—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

# rate-limit
limiter = Limiter(key_func=get_remote_address, default_limits=["100/minute"])
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ ‚Äî –≤–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Routers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.include_router(auth_router)                       # /auth/*
app.include_router(users_router, prefix="/api")     # /api/users
app.include_router(films_router, prefix="/api")     # /api/films
app.include_router(materials_router, prefix="/api")   # /api/materials

admin_deps = [Depends(admin_required)]
app.include_router(rules_router, prefix="/api", dependencies=admin_deps)
app.include_router(orders_router, prefix="/api", dependencies=admin_deps)
app.include_router(stats_router, prefix="/api", dependencies=admin_deps)


# Static files (SPA frontend)
app.mount("/", StaticFiles(directory="/app/frontend", html=True), name="frontend")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Health ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@app.get("/api/health")
def health():
    return {"status": "ok"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Utils ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def cutoff_date() -> datetime:
    return datetime.utcnow() - timedelta(days=365)

# Low-stock alert helper


async def check_low_stock(db):
    for m in crud.list_materials(db):
        qty = crud._current_qty(db, m.id)
        if qty <= m.min_qty and not m.alerted:
            await telegram.low_stock(m.name, qty, m.min_qty)
            m.alerted = True
            db.commit()
        elif qty > m.min_qty and m.alerted:
            m.alerted = False
            db.commit()

# ID ¬´—Å–∫–ª–∞–¥—Å–∫–æ–≥–æ¬ª –∑–∞–∫–∞–∑–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–ª—ë–Ω–æ–∫
READY_ORDER_ID = 109704738

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Background Fetch Loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Background Fetch Loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@app.on_event("startup")
async def fetch_loop():
    async def loop():
        while True:
            db = SessionLocal()
            try:
                # ‚Äî‚Äî‚Äî –≥–æ—Ç–æ–≤—ã–µ –ø–ª—ë–Ω–∫–∏ (–∫–∞–∫ –±—ã–ª–æ) ‚Äî‚Äî‚Äî
                ready = await insales.fetch_order_by_id(READY_ORDER_ID)
                if ready:
                    db.query(models.ReadyFilm).delete()
                    for ln in ready.get("order_lines", []):
                        db.add(models.ReadyFilm(
                            sku=ln.get("sku"),
                            title=ln.get("title"),
                            quantity=ln.get("quantity", 0),
                        ))
                    db.commit()

                ready_titles = {f.title for f in db.query(models.ReadyFilm)}

                # ‚Äî‚Äî‚Äî –¥–ª—è —Ç–µ—Å—Ç–∞ ‚Äî‚Äî‚Äî
                # –í–°–¢–ê–í–¨ –í –ù–ê–ß–ê–õ–ï –¶–ò–ö–õ–ê
                # class FakeStatus:
                #     permalink = "novyy"

                # class FakeOrderLine:
                #     product_title = "–§–µ–π–∫–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"
                #     product_id = 1111
                #     quantity = 11

                # class FakeOrder:
                #     id = 999999
                #     created_at = '2025-06-22T23:31:27'
                #     customer = 'Aleksdev'
                #     ignored = False
                #     number = 999999
                #     custom_status = FakeStatus()
                #     lines = [FakeOrderLine()]
                #     source = "–¢–µ—Å—Ç"

                # ‚Äî‚Äî‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã ‚Äî‚Äî‚Äî
                # orders = [FakeOrder()]

                orders = await insales.fetch_orders(50)
                for o in orders:
                    if str(o.number) == str(READY_ORDER_ID):
                        continue

                    # upsert
                    db_order = crud.upsert_order(db, o)

                    # 1) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ¬´–∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º¬ª –∑–∞–∫–∞–∑–µ
                    if (
                        o.custom_status
                            and o.custom_status.permalink == "novyy"
                            and not db_order.client_notified
                    ):
                        logger.info("–ü–æ–π–º–∞–Ω –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∑–∞–∫–∞–∑ %s, —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", o.number)
                        await telegram.send(f"üìû –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∑–∞–∫–∞–∑ #{o.number} –æ—Ç {o.customer} –Ω–∞ —Å—É–º–º—É {o.total_price}")
                        db_order.client_notified = True
                        db.commit()

                    # 2) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–π –ø–ª—ë–Ω–∫–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
                    if not db_order.ready_notified:
                        hits = [ln.product_title for ln in o.lines if ln.product_title in ready_titles]
                        if hits:
                            channel = getattr(o, "source", "–Ω–µ–∏–∑–≤.")
                            msg = f"‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø–ª—ë–Ω–∫–∞ –≤ –∑–∞–∫–∞–∑–µ #{o.number} ({channel}): " + ", ".join(hits)
                            await telegram.send(msg)
                            db_order.ready_notified = True
                            db.commit()
                            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É %s", o.number)

                # 3) –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                await check_low_stock(db)

            except Exception:
                logger.exception("–§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª —É–ø–∞–ª")
            finally:
                db.close()

            await asyncio.sleep(60)

    asyncio.create_task(loop())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Cleanup Old Movements ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.on_event("startup")
async def cleanup_old_moves():
    async def loop():
        while True:
            db = SessionLocal()
            try:
                db.query(models.StockMovement)\
                  .filter(models.StockMovement.created_at < cutoff_date())\
                  .delete()
                db.commit()
            finally:
                db.close()
            await asyncio.sleep(24 * 3600)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    asyncio.create_task(loop())
